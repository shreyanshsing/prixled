{"version":3,"sources":["optSlice.js","circle.js","App.js","serviceWorker.js","store/store.js","index.js","logo.svg"],"names":["optSlice","createSlice","name","initialState","value","reducers","selected","state","action","push","payload","deleted","i","length","selector","c","actions","ComponenT","argument","dispatch","useDispatch","useState","data","setData","useEffect","axios","get","then","result","map","item","gRows","Math","floor","$","innerWidth","gCols","innerHeight","vals","_","shuffle","xpos","range","ypos","each","d","$newdiv","addClass","click","event","target","text","appendTo","html","css","className","App","useSelector","console","log","label","key","defaultValue","onAdd","onDelete","Boolean","window","location","hostname","match","configureStore","reducer","cReducer","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"8OAEaA,EAASC,YAAY,CACjCC,KAAK,MACLC,aAAa,CACZC,MAAM,CAAC,SAERC,SAAS,CACRC,SAAS,SAACC,EAAMC,GACbD,EAAMH,MAAMK,KAAKD,EAAOE,UAE3BC,QAAQ,SAACJ,EAAMC,GACd,IAAK,IAAII,EAAI,EAAGA,GAAIL,EAAMH,MAAMS,OAAQD,IACpCL,EAAMH,MAAMQ,IAAIJ,EAAOE,gBAClBH,EAAMH,MAAMQ,OAMXE,EAAS,SAACP,GAAD,OAASA,EAAMQ,EAAEX,OACxBJ,IAAf,Q,EACiCA,EAASgB,QAA5BV,E,EAAAA,S,EAASK,QCwBRM,MAtCf,SAAmBC,GACf,IAAMC,EAASC,cADU,EAEPC,mBAAS,IAFF,mBAErBC,EAFqB,KAEhBC,EAFgB,KAgC5B,OA7BDC,qBAAU,WACVC,IAAMC,IAAI,kBACTC,MAAK,SAACC,GAAUA,EAAON,KAAKO,KAAI,SAACC,GAAD,OAAQP,EAAQO,WAC/C,IAEFN,qBAAU,WAEV,IACIO,EAAQC,KAAKC,MAAMC,IAAE,gBAAgBC,aAD1B,KAEXC,EAAQJ,KAAKC,MAAMC,IAAE,gBAAgBG,cAF1B,KAGXC,EAAOC,IAAEC,QAAQlB,GACjBmB,EAAOF,IAAEC,QAAQD,IAAEG,MAAMX,IACzBY,EAAOJ,IAAEC,QAAQD,IAAEG,MAAMN,IAE7BG,IAAEK,KAAKN,GAAM,SAASO,EAAEjC,GACpB,IAAIkC,EAAUZ,IAAE,UAAUa,SAAS,qBACnCD,EAAQE,OAAM,SAACC,GACX9B,EAASb,EAAS4B,IAAEe,EAAMC,QAAQC,YACnCC,SAAS,eAAeC,KAAKR,GAChCC,EAAQQ,IAAI,CACR,SAAW,WACX,KAdO,IAcCb,EAAK7B,GAAe,KAC5B,IAfO,IAeA+B,EAAK/B,GAAe,OAC5BwC,SAAU,gBAAiBC,KAAKR,QAGrC,CAACvB,IAID,yBAAKiC,UAAU,iB,iBCAFC,MAjCf,WAEE,IAAMpD,EAAMqD,YAAY3C,GAOxB,OANA4C,QAAQC,IAAIvD,GACIgB,cAMd,yBAAKmC,UAAU,OACf,4BAAQA,UAAU,UAChB,wBAAIA,UAAU,QAAd,OAAyB,0BAAMA,UAAU,qBAAhB,SAE3B,6BAASA,UAAU,WACnB,0CACY,6BADZ,aAGA,yBAAKA,UAAU,aACb,kBAAC,IAAD,CACYK,MAAM,SACNC,IAAKzD,EACL0D,aAAc1D,EACd2D,MAAOL,QAAQC,IAAI,cACnBK,SAAU,WAlBP,IAACf,EAClBS,QAAQC,IAAI,UAAUV,EAAMC,OAAO9C,WAoBnC,4DAEA,kBAAC,EAAD,QCzBgB6D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCfSC,kBAAe,CAC7BC,QAAQ,CACPxD,EAAEyD,KCGJC,IAASC,OAEP,kBAAC,IAAMC,WAAP,KACA,kBAAC,IAAD,CAAUC,MAAOA,GACf,kBAAC,EAAD,QAGFC,SAASC,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtD,MAAK,SAAAuD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,a,kGGzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.38289e1c.chunk.js","sourcesContent":["import {createSlice} from '@reduxjs/toolkit'\n\nexport const optSlice=createSlice({\n\tname:'opt',\n\tinitialState:{\n\t\tvalue:[\"none\"]\n\t},\n\treducers:{\n\t\tselected:(state,action)=>{\n\t\t\t\t\tstate.value.push(action.payload)\n\t\t\t},\n\t\tdeleted:(state,action)=>{\n\t\t\tfor (var i = 0; i <=state.value.length; i++) {\n\t\t\t\tif(state.value[i]==action.payload){\n\t\t\t\t\tdelete state.value[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n})\nexport const selector=(state)=>state.c.value;\nexport default optSlice.reducer;\nexport const {selected,deleted} =optSlice.actions; ","import React,{useState,useEffect} from 'react';\nimport logo from './logo.svg';\nimport \"./circle.css\";\nimport $ from 'jquery'\nimport axios from \"axios\";\nimport _ from 'underscore';\nimport {useDispatch} from 'react-redux';\nimport {selected} from './optSlice';\nfunction ComponenT(argument) {\n    const dispatch=useDispatch();\n\tconst [data,setData]=useState([]); \nuseEffect(()=>{\naxios.get('intersets.json')\n.then((result)=>{result.data.map((item)=>setData(item))})\n},[])\n\nuseEffect(()=>{\n\nvar tilesize = 110;\nvar gRows = Math.floor($(\".circle-area\").innerWidth()/tilesize);\nvar gCols = Math.floor($('.circle-area').innerHeight()/tilesize);\nvar vals = _.shuffle(data);\nvar xpos = _.shuffle(_.range(gRows));\nvar ypos = _.shuffle(_.range(gCols));\n\n_.each(vals, function(d,i){\n    var $newdiv = $('<div/>').addClass(\"btn-circle-medium\");\n    $newdiv.click((event)=>{\n        dispatch(selected($(event.target).text()))\n    }).appendTo('circle-area').html(d);\n    $newdiv.css({\n        'position':'absolute',\n        'left':(xpos[i] * tilesize)+'px',\n        'top':(ypos[i] * tilesize)+'px'\n    }).appendTo( '.circle-area' ).html(d);  \n});\n\n},[data])\n\n\t// body...\n\treturn(\n\t\t<div className=\"circle-area\">\n\n   \t\t</div>\n\t\t)\n}\nexport default ComponenT;","import React from 'react';\nimport \"./App.css\";\nimport ComponenT from './circle'\nimport {useSelector,useDispatch} from \"react-redux\";\nimport {selector,deleted} from \"./optSlice\";\nimport ChipInput from 'material-ui-chip-input';\n\n\nfunction App() {\n  \n  const value=useSelector(selector);\n  console.log(value)\n   const dispatch=useDispatch();\n\n  const handleDelete=(event)=>{\n    console.log(\"deleted\",event.target.value)\n  }\n  return (\n    <div className=\"App\">\n    <header className=\"header\">\n      <h3 className=\"logo\">PRIX<span className=\"light-weight-font\">LED</span></h3>\n    </header>\n    <section className=\"section\">\n    <p>\n    Select Your <br/>Intersets\n    </p>\n    <div className=\"intersets\">\n      <ChipInput\n                  label=\"Select\"\n                  key={value}\n                  defaultValue={value}\n                  onAdd={console.log(\"chip added\")}\n                  onDelete={()=>handleDelete()}   \n               />\n      </div>\n    <small>*Pick at least three(3).</small>\n    </section>\n    <ComponenT/>\n        </div>\n  );\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {configureStore} from '@reduxjs/toolkit';\nimport cReducer from '../optSlice';\n\nexport default configureStore({\n\treducer:{\n\t\tc:cReducer\n\t}\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./store/store\";\n\nReactDOM.render(\n\n  <React.StrictMode>\n  <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}